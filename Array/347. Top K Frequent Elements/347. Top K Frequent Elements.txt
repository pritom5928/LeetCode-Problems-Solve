347. Top K Frequent Elements
Medium

Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.

 

Example 1:

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]
Example 2:

Input: nums = [1], k = 1
Output: [1]
 

Constraints:

1 <= nums.length <= 105
-104 <= nums[i] <= 104
k is in the range [1, the number of unique elements in the array].
It is guaranteed that the answer is unique.
 

Follow up: Your algorithm's time complexity must be better than O(n log n), where n is the array's size.


A brute force Solution with 192 ms runtime beats 14.27% C# submisison with 46.1 MB Memory consuption beats 34.92% :

public class Solution
    {
        public int[] TopKFrequent(int[] nums, int k)
        {
            int[] resultArray = new int[k];
            Dictionary<int, int> map = new Dictionary<int, int>();

            for (int i = 0; i < nums.Length; i++)
            {
                if (!map.ContainsKey(nums[i]))
                    map[nums[i]] = 1;
                else
                    map[nums[i]] += 1;
            }

            for (int i = 0; i < k; i++)
            {
                int maxFrequent = map.Values.Max();
                var element = map.Where(e => e.Value == maxFrequent).FirstOrDefault();
                resultArray[i] = element.Key;
                map.Remove(resultArray[i]);
            }

            return resultArray;
        }
    }



Another approach with LINQ 166ms runtime beats 42.21% C# submissions. This just for fun :D :

public class Solution
    {
        public int[] TopKFrequent(int[] nums, int k)
        {
            return  nums.GroupBy(g => g).OrderByDescending(o => o.Count()).Select(s=>s.Key).Take(k).ToArray();
        }
    }